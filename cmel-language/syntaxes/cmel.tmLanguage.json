{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Cmel",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#function-declaration"
		},
		{
			"include": "#function-call"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.cmel",
					"match": "//.*$"
				},
				{
					"name": "comment.block.cmel",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"function-declaration": {
			"patterns": [
				{
					"match": "\\b(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
					"captures": {
						"1": {
							"name": "keyword.control.cmel"
						},
						"2": {
							"name": "entity.name.function.declaration.cmel"
						}
					}
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
					"captures": {
						"1": {
							"name": "support.function.cmel"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
                {
                    "name": "keyword.control.cmel",
                    "match": "\\b(if|else|while|for|return|break)\\b"
                },
                {
                    "name": "keyword.control.cmel",
                    "match": "\\b(var|const)\\b"
                },
                {
                    "name": "keyword.control.import.cmel",
                    "match": "\\b(import|from)\\b"
                },
                {
                    "name": "keyword.operator.logical.cmel",
                    "match": "\\b(or|and)\\b"
                },
                {
                    "name": "support.function.builtin.cmel",
                    "match": "\\b(print)\\b"
                },
                {
                    "name": "keyword.control.cmel",
                    "match": "\\b(class|this|super)\\b"
                }
            ]
		},
		"strings": {
			"name": "string.quoted.double.cmel",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.cmel",
					"match": "\\\\[ntr\"\\\\]"
				},
				{
					"name": "invalid.illegal.escape.cmel",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"name": "constant.numeric.cmel",
			"match": "\\b[0-9]+(\\.[0-9]+)?\\b"
		}
	},
	"scopeName": "source.cmel"
}